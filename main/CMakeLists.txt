
find_package (Threads)

FIND_PACKAGE(Wt REQUIRED Wt HTTP)
ADD_DEFINITIONS(-DHPDF_DLL)

include_directories(${framework_SOURCE_DIR}/src/Core)
include_directories(${framework_SOURCE_DIR}/src/Energy)
include_directories(${framework_SOURCE_DIR}/src/Communication)
include_directories(${framework_SOURCE_DIR}/src/AtomicTasks)
include_directories(${framework_SOURCE_DIR}/src/Agents)
include_directories(${framework_SOURCE_DIR}/src/Agents/Default)
include_directories(${framework_SOURCE_DIR}/src/Mission)
include_directories(${framework_SOURCE_DIR}/src/Web)
include_directories(${framework_SOURCE_DIR}/src/Agents/ChargingStation)
include_directories(${framework_SOURCE_DIR}/src/Agents/Logger)
include_directories(${framework_SOURCE_DIR}/src/Agents/P3DX)
include_directories(${framework_SOURCE_DIR}/src/Agents/Rosbot)
include_directories(${framework_SOURCE_DIR}/src/Agents/Mavros)

link_directories(${framework_SOURCE_DIR}/src/Core)
link_directories(${framework_SOURCE_DIR}/src/Energy)
link_directories(${framework_SOURCE_DIR}/src/Communication)
link_directories(${framework_SOURCE_DIR}/src/AtomicTasks)
link_directories(${framework_SOURCE_DIR}/src/Agents)
link_directories(${framework_SOURCE_DIR}/src/Agents/Default)
link_directories(${framework_SOURCE_DIR}/src/Mission)
link_directories(${framework_SOURCE_DIR}/src/Agents/ChargingStation)
link_directories(${framework_SOURCE_DIR}/src/Agents/Logger)
link_directories(${framework_SOURCE_DIR}/src/Web)
link_directories(${framework_SOURCE_DIR}/src/Agents/Rosbot)
link_directories(${framework_SOURCE_DIR}/src/Agents/P3DX)
link_directories(${framework_SOURCE_DIR}/src/Agents/Mavros)

# Creating warehouse executable
add_executable(warehouse warehouse.cpp)
target_link_libraries(warehouse core)
target_link_libraries(warehouse communication)
target_link_libraries(warehouse mission)
target_link_libraries(warehouse default atomicTasks)
target_link_libraries(warehouse rosbot atomicTasks)
target_link_libraries(warehouse p3dx atomicTasks)
target_link_libraries(warehouse coexclover atomicTasks)
target_link_libraries(warehouse logger)
target_link_libraries (warehouse ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(warehouse stdc++fs)
target_link_libraries(warehouse Wt::Wt Wt::HTTP)
target_link_libraries(warehouse ${catkin_LIBRARIES})

# Creating hospital executable
add_executable(hospital hospital.cpp)
target_link_libraries(hospital core)
target_link_libraries(hospital communication)
target_link_libraries(hospital mission)
target_link_libraries(hospital default atomicTasks)
target_link_libraries(hospital rosbot atomicTasks)
target_link_libraries(hospital p3dx atomicTasks)
target_link_libraries(hospital coexclover atomicTasks)
target_link_libraries(hospital logger)
target_link_libraries (hospital ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(hospital stdc++fs)
target_link_libraries(hospital Wt::Wt Wt::HTTP)
target_link_libraries(hospital ${catkin_LIBRARIES})